# Stack Server

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stack Server">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/score_tracker.livemd">Score Tracker</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/timer.livemd">Timer</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Stack

You're going to create a `Stack` [GenServer](https://hexdocs.pm/elixir/GenServer.html).

A stack is a common data structure similar to a list, however a stack can only **push** elements onto the top of the stack, and **pop** elements from the top of the stack.

### Requirements

* The initial stack state starts as an empty list `[]`.
* Create the `push/2`, `pop/1`, and `start_link/1` functions as documented below.
* Define the necessary server callbacks that update the stack's state.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = Stack.start_link([])

# Asynchronous
:ok = Stack.push(pid, 1)
:ok = Stack.push(pid, 2)
:ok = Stack.push(pid, 3)

# Synchronous
3 = Stack.pop(pid)
2 = Stack.pop(pid)
1 = Stack.pop(pid)
nil = Stack.pop(pid)
```

```elixir
defmodule Stack do
  @moduledoc """
  iex> {:ok, pid} = Stack.start_link([])
  iex> :ok = Stack.push(pid, 1)
  iex> Stack.pop(pid)
  1
  iex> Stack.pop(pid)
  nil
  """

  use GenServer

  def start_link(_opts) do
  end

  def push(stack_pid, element) do
  end

  def pop(stack_pid) do
  end

  def init(_opts) do
    {:ok, []}
  end

  def handle_call({:push, element}, _from, state) do
    new_state = [element | state]
    {:reply, new_state, new_state}
  end

  def handle_call(:pop, _from, state) do
    [head | tail] = state
    {:reply, head, tail}
  end
end
```

</details>

Implement the `Stack` module below. You do not need to handle `:pop`-ing an element from an empty stack.

Consider starting with the `handle_call/3` callback functions, then implement the client API functions `Stack.push/2` and `Stack.pop/1`.

```elixir
defmodule Stack do
  use GenServer

  @doc """
  Start the `Stack` process.

  ## Examples

      iex> {:ok, _pid} = Stack.start_link([])
  """
  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  @doc """
  Synchronously push an element onto the top of the `Stack`. Return the current stack.

  ## Examples

      iex> {:ok, pid} = Stack.start_link([])
      iex> Stack.push(pid, 1)
      [1]
      iex> Stack.push(pid, 2)
      [2, 1]
      iex> Stack.push(pid, 3)
      [3, 2, 1]
  """
  def push(stack_pid, element) do
    GenServer.call(stack_pid, {:push, element})
  end

  @doc """
  Pop an element from the top of the `Stack`.

  ## Examples

      iex> {:ok, pid} = Stack.start_link([])
      iex> Stack.push(pid, 1)
      iex> Stack.push(pid, 2)
      iex> Stack.push(pid, 3)
      iex> Stack.pop(pid)
      3
      iex> Stack.pop(pid)
      2
      iex> Stack.pop(pid)
      1
  """
  def pop(stack_pid) do
    GenServer.call(stack_pid, :pop)
  end

  @doc """
  Necessary callback function to start the `Stack` process.

  ## Examples

      iex> {:ok, _pid} = GenServer.start_link(Stack, [])
  """
  @impl true
  def init(_opts) do
    {:ok, []}
  end

  @doc """
  Callback function to add an element onto the top of the `Stack`.

  ## Examples

      iex> {:ok, pid} = GenServer.start_link(Stack, [])
      iex> GenServer.call(pid, {:push, 1})
      [1]
      iex> GenServer.call(pid, {:push, 2})
      [2, 1]
      iex> GenServer.call(pid, {:push, 3})
      [3, 2, 1]
  """
  @impl true
  def handle_call({:push, element}, _from, state) do
    new_state = [element | state]
    response = new_state
    {:reply, response, new_state}
  end

  @doc """
  Callback function to pop an element off of the top of the `Stack`.
  You do not need to handle popping when a stack is empty.

  ## Examples

      iex> {:ok, pid} = GenServer.start_link(Stack, [])
      iex> GenServer.call(pid, {:push, 1})
      iex> GenServer.call(pid, {:push, 2})
      iex> GenServer.call(pid, {:push, 3})
      iex> GenServer.call(pid, :pop)
      3
      iex> GenServer.call(pid, :pop)
      2
      iex> GenServer.call(pid, :pop)
      1
  """
  @impl true
  def handle_call(:pop, _from, state) do
    [pop | new_state] = state
    response = pop
    {:reply, response, new_state}
  end
end
```

## Commit Your Progress

DockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.

Run `git status` to ensure there are no undesirable changes.
Then run the following in your command line from the `curriculum` folder to commit your progress.

```
$ git add .
$ git commit -m "finish Stack Server exercise"
$ git push
```

We're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.

We also offer a paid course where you can learn from an instructor alongside a cohort of your peers.
We will accept applications for the June-August 2023 cohort soon.

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stack Server">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/score_tracker.livemd">Score Tracker</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/timer.livemd">Timer</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
